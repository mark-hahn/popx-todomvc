
# todomvc web page popx module

module:
  $name:        todomvc
  description:  A popx todomvc example webpage

modules:
  
  # interface to parent popx server module
  server:
    $module:    [$IO]
    $taskList:  taskList
    
  # watch new task text input
  newTaskTextInput: 
    $module:    [$dom]
    $op:        [input]
    $sel:       [".new-todo"]
    change>:    newTaskText>
  
  # create new task instance
  newTaskInst:
    $module:    [$newObject]
    done:       [false]
    text<:      <newTaskText
    $newObj>:   newTaskObj>
    
  # add task obj to list (model)  
  addItemToList:
    $module:    [$arrayOps]
    $op:        [unshift]
    $item<:     <newTaskObj
    $array:     taskList
    
  # watch all task done checkbox inputs
  doneChkboxes:
    $module:    [$dom]
    $op:        [input]
    $sel:       [".done-chkbox", "#task-list"]
    $value:     taskChecks
    
  # set class to done if wire taskCheckVals is true
  showItemDone:
    $module:    [$dom]
    $op:        [setClass]
    $sel:       [".task", "#task-list"]
    $if:        taskChecks
    $class:     [done]

  # watch all delete buttons
  deleteBtns:
    $module:    [$dom]
    $op:        [input]
    $sel:       [".del-btn", "#task-list"]
    $evtValSel: [".task"]
    click>:     taskDeleteEvt>
  
  # remove task ele from task list on deleteEle event
  removeItem:
    $module:    [$arrayOps]
    $op:        [remove]
    $item<:     <taskDeleteEvt
    $array:     taskList

  # render model into elements using mustache template
  renderTaskList:
    $module:    [$dom]
    $op:        [createEle]
    $model:     taskList
    $template:  [file, item.html]
    $ele:       taskEleList  
    
  # create/add task list to dom and react to changes
  showList:
    $module:    [$dom]
    $op:        [setChildren]
    $parent:    ["body"]
    $children:  taskEleList
  
