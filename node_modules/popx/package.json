{
  "name": "popx",
  "version": "0.1.1",
  "description": "PopX Dataflow/Reactive Framework (JS for now)",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mark-hahn/popx.git"
  },
  "keywords": [
    "reactive",
    "dataflow",
    "framework",
    "javascript"
  ],
  "author": {
    "name": "Mark Hahn",
    "email": "mark@hahnca.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mark-hahn/popx/issues"
  },
  "homepage": "https://github.com/mark-hahn/popx#readme",
  "readme": "## popx\n\n### A Reactive Dataflow Framework (JS for now)\n\nThis is a placeholder project for a work-in-progress.  Post any questions on the [github repo](https://github.com/mark-hahn/popx).\n\n### Notes\n- app consists of hierarchical levels\n  - module nesting creates tree structure\n  - popx modules\n    - non-leaf modules\n    - strictly declarative\n    - creates dataflow graphs\n    - sets up code module instances and runs them\n    - .popx file format is JSON\n  - code modules\n    - leaf modules\n    - standard code, JS for now\n    \n    \n- popx connections, aka pipes, values, wires\n  - multiple readers and writers to single connection\n  - any JS value (must be serializable with JSON)\n  - change in value can trigger reaction (data-flow)\n  - Optionally trigger reaction when writing same value (event)\n  - works across processes and networks\n  - connections are totally asynchronous\n    - no callbacks\n  - traffic rate is not meant to be high-speed\n    - millisecond rates not microsecond\n    - data may be serialized\n    - data may cross process/network connections\n    - performance achieved by appropriate module arhictecture\n    - example is processing web pages as requests come in\n\n      \n- popx app\n  - App is tree of popx files and inluded code modules\n  - root of app tree is always a popx file\n  - popx file may include other popx files and code modules\n  - code modules can only include other code modules\n\n\n- popx ide\n  - graphical display of modules\n    - shows modules as boxes with \"pins and wiring\"\n  - single click pops open popx or code module\n    - popx module shown as nested graphics\n    - code module shown with normal text-based code editor\n    - popx name comes from popping open module\n  - runs in browser or Atom desktop editor\n  - single click on connection wire shows current value\n  - May single step at connection value level\n  - Breaks on specific values or change/events on wires\n  - May slow down execution to watch values as they change\n\n\n- popx code modules\n  - code modules have interaction rules\n    - May call other nested code modules as usual\n    - May not call other popx code modules\n    - May communicate through inter-module popx connections\n    - May use popx global namspaced connections\n  - JS version requires ES6 (babel)\n    \n    \n- popx npm module provides code module access to popx connections\n  - single popx object, usually in variable named `$`\n  - assignment to `$.varname` triggers write/event to connection `varname`\n  - referencing `$.varname` reads value from connection\n  - function `$.react` is called on `$.varname` input connection value change\n    - function can react to one or more connections\n    \n    \n- code module execution\n  - top level runs under various specifiable conditions\n    - at start of app\n    - when any input connection has value\n    - when all input connections have value\n  - react functions\n    - all execution after first run is by reaction only\n  - code module execution is normal usually imperative code\n    - first implementation only supports ES6 JS\n\n\n- Parallel processing\n  - supports code modules in different processes/cores/servers\n  - isomorphic, code can be trivially moved between locations\n  - Avoids nodejs single process performance limitation\n\n\n- Uses\n  - apps with circle of human input to processing to output\n    - web apps with browser actions to logic to DOM display\n    - server is just one component in circle\n  - dataflow control apps from sensors to actions\n\n\n- similar paradigm to reactiveX\n  - both use reactive, event-driven pattern\n  - both designed to work with any language\n  - reactiveX\n    - api of functions\n    - pure functional\n  - popx \n    - much simpler with imperative code modules\n    - declarative data-flow connections\n    - JS implementation only for now\n\n\n- Status\n  - Beta\n  - used in production\n    - moderate-sized multi-zone HVAC app\n  \n  \n- MIT license\n",
  "readmeFilename": "README.md",
  "gitHead": "41cd3ef63f03be83b7f07f6c50d981382a81f10d",
  "_id": "popx@0.1.1",
  "scripts": {},
  "_shasum": "752a1ac5a703b041d52fb7a6c7c5738f332a46e1",
  "_from": "popx@>=0.1.0 <0.2.0"
}
